<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta charset="utf-8" /> 
		<title>SQLbox: database access library</title>
		<link rel="alternate" href="atom.xml" type="application/atom+xml" title="sqlbox version feed" />
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fork-awesome@1.2.0/css/fork-awesome.min.css"
		 integrity="sha256-XoaMnoYC5TH6/+ihMEnospgm0J1PM/nioxbOUdnM8HY=" crossorigin="anonymous" />
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Alegreya+Sans:400,400italic,500" />
		<link rel="stylesheet" href="https://bsd.lv/css/style.css" />
		<link rel="stylesheet" href="index.css" />
		<meta property="og:title" content="sqlbox: database access library" />
		<meta property="og:description" 
		 content="A secure database access library using privilege separation." />
	 	<meta property="og:url" content="https://kristaps.bsd.lv/sqlbox/index.html" />
		<meta property="og:type" content="website" />
		<meta name="description" 
		 content="A secure database access library using privilege separation." />
	</head>
	<body itemscope="itemscope" itemtype="http://schema.org/SoftwareApplication">
		<nav id="within">
			<a href="#install">install</a>
			<a href="#security">security</a>
			<a href="#performance">perf</a>
			<a href="#docs">docs</a>
			<a href="https://github.com/kristapsdz/sqlbox">
				<i class="fa fa-fw fa-github"></i>
				repo 
			</a>
			<span>
				<a href="atom.xml"><i class="fa fa-fw fa-rss"></i></a>
				<nav data-sblg-nav="1" data-sblg-navtag="version" 
				 data-sblg-navsz="1" data-sblg-navsort="date" data-sblg-navxml="1">
					v${sblg-title}
				</nav>
			</span>
		</nav>
		<nav id="breadcrumbs">
			BSD.lv tools for BCHS: 
			<a href="https://kristaps.bsd.lv/kcgi">kcgi</a>, 
			<strong><a href="https://kristaps.bsd.lv/sqlbox">sqlbox</a></strong>, 
			<a href="https://kristaps.bsd.lv/openradtool">ort</a>
		</nav>
		<article class="text">
			<section>
				<h2>
					introduction
				</h2>
				<p>
					<span itemprop="name" class="nm">sqlbox</span> is an 
					<a href="http://opensource.org/licenses/ISC" rel="license">open source</a> 
					<span itemprop="description">C/C++ secure database access library</span>
				       	at this time limited to <a href="https://www.sqlite.org">sqlite3</a> databases.
					Instead of operating databases in-process, <span class="nm">sqlbox</span> uses a multi-process,
					resource-separated approach to safe-guard the database from the calling application.
				</p>
				<h3>
					some features&#8230;
				</h3>
				<ul>
					<li>
						role-based access control on a per-statement and
						per-source (opening and closing) basis, limiting
						application database access and manipulation to role
						purview
					</li>
					<li>
						in-child filter capabilities allowing for selective
						scrambling or anonymisation of query results
					</li>
					<li>
						<q>asynchronous</q> mode for some operations allows
						all the security benefits with only the slightest
						performance penalty in one-way interprocess
						communication
					</li>
					<li>
						<q>multi-select</q> mode allows forward-caching of
						step responses, considerably reducing the frequency
						of synchronous communication
					</li>
				</ul>
				<p>
					The library is well-documented and has all of its behaviour
					checked with a large set of regression tests.  It follows
					<a href="https://semver.org">semver</a> versioning.  It may
					be run on any modern
					<span itemprop="operatingSystem">UNIX</span>.  It is a
					<a href="https://www.bsd.lv">BSD.lv</a> project.
				</p>
				<h3>
					latest release&#8230;
				</h3>
				<nav data-sblg-nav="1" data-sblg-navtag="version" 
				 data-sblg-navsz="1" data-sblg-navsort="date" data-sblg-navcontent="1">
					<div class="header">
						<span class="date">
							<i class="fa fa-calendar fa-fw"></i>
							<time datetime="${sblg-datetime}">${sblg-date}</time>
						</span>
						<span class="version">version ${sblg-title}</span>
					</div>
					<div class="content">${sblg-aside}</div>
				</nav>
			</section>
			<section id="install">
				<h2>
					install
				</h2>
				<p>
					You'll need any modern UNIX system with the 
					<a href="https://www.sqlite.org/index.html">sqlite3</a> library already installed.
					(Tested on FreeBSD, Linux, OpenBSD; built on OpenBSD.)
					I strongly suggest using <a href="https://www.openbsd.org">OpenBSD</a> as it provides the
					<a href="https://man.openbsd.org/pledge.2">pledge</a> facility.
					Other systems, such as Linux or FreeBSD, are more difficult (hugely so, in the former case) to configure
					securely.
					Start by checking that your system's third-party packages system doesn't already have <span
						class="nm">sqlbox</span>.
					If it does not, proceed.
				</p>
				<p>
					Download either the latest release (<a href="snapshots/sqlbox.tar.gz">sqlbox.tar.gz</a> | <a
						href="snapshots/sqlbox.tar.gz.sha512">sha512</a>) or the current sources from the <a
						href="https://github.com/kristapsdz/sqlbox">GitHub repository</a>.
				</p>
				<ol>
					<li>
						Download and verify the newest release (if not from the source repository).
						<pre>sha512 -C sqlbox.tar.gz.sh512 sqlbox.tar.gz
tar zvxpf sqlbox.tar.gz</pre>
					</li>
					<li>
						Configure for your system and install destination, compile, install.
						The default is <span class="path">/usr/local</span>.
						<pre>./configure 
make
make install</pre>
						You may need to run this with BSD make (<code>bmake</code>) on non-BSD systems.
						You shouldn't need to pass any arguments to <code>configure</code>.
					</li>
				</ol>
				<p>
					That's it!
					The manpages are the canonical source of information on this library.
					Start with <span class="path">sqlbox(3)</span>.
				</p>
			</section>
			<section id="security">
				<h2>
					security
				</h2>
				<p>
					The purpose of <span class="nm">sqlbox</span> is to provide
					security to your data <emph>from your application</emph>:
					both from programming errors and compromise.  Its security
					principles are as follows:
				</p>
				<ul>
					<li>
						only pre-set statements shall be executed
					</li>
					<li>
						only pre-set databases shall be opened
					</li>
					<li>
						database components shall not be reachable by
						process file-system or memory
					</li>
					<li>
						provide this with an acceptable impact on performance
					</li>
				</ul>
				<p>
					It effects this by forked a database management process with
					pre-set database names and statements.  Once forked, the
					names and statements are inherited and can no longer be
					changed.  Communication with the database is via
					tightly-controlled socket IPC with the control process.
					Requests for statements are by identifier, not strings.
				</p>
				<figure class="intro">
					<img src="index.svg" alt="operation of sqlbox" />
					<figcaption>
						Not only does this protect the database itself, it
						also allows fine-grained access controls and other
						operations opaque to the caller.
					</figcaption>
				</figure>
				<p>
					When the caller uses a constraint mechanism such as
					<a href="https://man.openbsd.org/pledge.2">pledge</a>, it
					makes the database completely inaccessable except via
					controlled IPC.
				</p>
				<p>
					This security is built to enforce a
					<a href="https://en.wikipedia.org/wiki/Role-based_access_control">
						role-based access control</a> system, which
					is useful when a single application has several different
					roles of operation (e.g., users, administration, analysis).
					This is enforced within the management process, so a
					compromised application cannot change its own role except
					within the transition matrix set during creation.  The
					management process also provides opaque anonymisation of
					data, which is especially useful for analysis when database
					information may contain identity information.
				</p>
				<p>
					A full automated test suite makes sure that these
					constraints are followed.  Its coverage is as follows:
				</p>
				<div data-sblg-article="1" data-sblg-articletag="coverage"></div>
				<p>
					Testing is further enabled by running with valgrind and
					compiler sanitisers as a commit hook.
				</p>
			</section>
			<section id="performance">
				<h2>
					performance
				</h2>
				<p>
					The following are a series of performance measurements between raw 
					<a href="https://www.sqlite.org">sqlite3</a> databases.
					using the 
					<a href="https://sqlite.org/c3ref/intro.html">C/C++ API</a>,
					<a href="https://kristaps.bsd.lv/ksql">ksql</a>,
					and <span class="nm">sqlbox</span>.
					For consistency, all databases in the performance analysis are opened as <code>:memory:</code>.
				</p>
				<p>
					<span class="nm">sqlbox</span> tries to minimise the amount of system calls used to exchange data, and
					minimise even further instances of <q>synchronous</q> communication where the client requests then waits
					for data.
				</p>
				<figure class="perf">
					<img src="perf-full-cycle.png" alt="performance metric 1" />
					<figcaption>
						A full cycle of opening a database, creating a table, and inserting a single row of data (four
						integers, to be precise).
						This is re-run for the number of iterations on the x-axis.
						Since these operations use asynchronous <span class="nm">sqlbox</span>, the performance penalty
						is only for interprocess communication.
					</figcaption>
				</figure>
				<figure class="perf">
					<img src="perf-prep-insert-final.png" alt="performance metric 2" />
					<figcaption>
						A series of statement preparations, binding parameters to the query, and executing the query.
						The step function is synchronous and constitutes the majority of the delay in the 
						<span class="nm">sqlbox</span> case.
					</figcaption>
				</figure>
				<figure class="perf">
					<img src="perf-rebind.png" alt="performance metric 3" />
					<figcaption>
						This prepares then, in a loop, rebinds and steps a statement.
						The step function, again, is synchronous and constitutes the majority of overhead.
					</figcaption>
				</figure>
				<figure class="perf">
					<img src="perf-select-multi.png" alt="performance metric 4" />
					<figcaption>
						This showcases how quickly selection occurs with <span class="nm">sqlbox</span>'s
						multiple-select option, where rows are cached ahead of time by the server and returned quickly
						to the client.
					</figcaption>
				</figure>
				<p>
					In general, the slowness of <a href="https://kristaps.bsd.lv/ksql">ksql</a> is that each operation
					involves a synchronous read and write between server and client.
					In <span class="nm">sqlbox</span>, there are asynchronous versions of most functions to significantly
					reduce contention.
					Moreover, the wire format is optimised for one unfragmented read (or write) in the general case.

				</p>
			</section>
			<section id="docs">
				<h2>
					documentation
				</h2>
				<p>
					The canonical documentation for using <span class="nm">sqlbox</span> is its manpages.
					Below is a list of all bundled manuals.
					These apply to the current version of this software, which is
					<nav data-sblg-nav="1" data-sblg-navtag="version" 
					 data-sblg-navsz="1" data-sblg-navsort="date" data-sblg-navxml="1">
					 <strong>${sblg-title}</strong>.
					</nav>
				</p>
				<p>
					This library makes use of <a href="https://man.openbsd.org/pkg-config">pkg-config</a>, so testing for
					installation, compile and link flags, etc., are all accomplished using that way.
				</p>
				<nav data-sblg-nav="1" data-sblg-navtag="manpages" data-sblg-navcontent="1" data-sblg-navsort="title">
					<a href="${sblg-base}.html">${sblg-title}(3)</a>: ${sblg-aside}
				</nav>
			</section>
		</article>
		<footer>
			&#169;
			<a itemprop="author" itemscope="itemscope" 
			 itemtype="http://schema.org/Person" rel="author" href="https://github.com/kristapsdz">
				<span itemprop="name">Kristaps Dzonsons</span>
			</a>
		</footer>
	</body>
</html>
